// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2411.BrandonBot.subsystems;


import org.usfirst.frc2411.BrandonBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;

import org.usfirst.frc2411.BrandonBot.OI;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Subsystem1 extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark mainRight;
    private Spark mainLeft;
    private Spark reserveRight;
    private Spark reserveLeft;
    private RobotDrive robotDrive21;
    public OI interf = new OI();


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Subsystem1() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        mainRight = new Spark(0);
        addChild("Speed Controller 1",mainRight);
        mainRight.setInverted(false);
        

        mainLeft = new Spark(1);
        addChild("Speed Controller 2",mainLeft);
        mainLeft.setInverted(true);

        reserveRight = new Spark(2);
        addChild("Speed Controller 3",reserveRight);
        reserveRight.setInverted(false);
        

        reserveLeft = new Spark(3);
        addChild("Speed Controller 4",reserveLeft);
        reserveLeft.setInverted(true);
        
        // robotDrive21 = new RobotDrive(mainRight, mainLeft);
        robotDrive21 = new RobotDrive(mainRight, mainLeft, reserveRight, reserveLeft);
        
        robotDrive21.setSafetyEnabled(true);
        robotDrive21.setExpiration(0.1);
        robotDrive21.setSensitivity(0.5);
        robotDrive21.setMaxOutput(1.0);

        robotDrive21.setSafetyEnabled(false);

        // robotDrive21.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        // robotDrive21.setInvertedMotor(MotorType.kFrontRight, true);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    


    @Override
    public void periodic() {
        double leftSpeed = interf.controller.getRawAxis(1);
        double rightSpeed = interf.controller.getRawAxis(3);
        
        // if( interf.controller.getRawButton(8)){
        //     mainRight.set(.5);
        // }
        // else{
        //     mainRight.set(0);
        // }
        
        // if( interf.controller.getRawButton(8)){
        //     mainLeft.set(.5);
        // }      
        // else{
        //     mainLeft.set(0);
        // } 
        
        
        // if( interf.controller.getRawButton(7)){
        //     reserveRight.set(.5);
        // }
        // else{
        //     reserveRight.set(0);
        // }
        
        // if( interf.controller.getRawButton(7)){
        //     reserveLeft.set(.5);
        // }
        // else{
        //     reserveLeft.set(0);
        // }

        // double maxSpeed = .7;
        double maxSpeed = 1;
        double deadZone = 0;
        double exponentFactor = 2;
        // double turboSpeed = .9;
        // if (interf.controller.getRawButton(8)){maxSpeed=turboSpeed;}

        // if (leftSpeed > maxSpeed){leftSpeed = maxSpeed;}
        // if (rightSpeed > maxSpeed){rightSpeed = maxSpeed;}
        // if (leftSpeed < maxSpeed*-1){leftSpeed = maxSpeed*-1;}
        // if (rightSpeed < maxSpeed*-1){rightSpeed = maxSpeed*-1;}

        if (Math.abs(rightSpeed) > deadZone){
            if(rightSpeed < 0){
                mainRight.set(Math.pow(rightSpeed, exponentFactor)*-1);
                reserveRight.set(Math.pow(rightSpeed, exponentFactor)*-1);
            }
            else{
                mainRight.set(Math.pow(rightSpeed, exponentFactor));
                reserveRight.set(Math.pow(rightSpeed, exponentFactor));
            }
        }
        else{
            mainRight.set(0);
            reserveRight.set(0);
        }

        if (Math.abs(leftSpeed) > deadZone){
            if(leftSpeed < 0){
                mainLeft.set(Math.pow(leftSpeed, exponentFactor)*-1);
                reserveLeft.set(Math.pow(leftSpeed, exponentFactor)*-1);
            }
            else{
                mainLeft.set(Math.pow(leftSpeed, exponentFactor));
                reserveLeft.set(Math.pow(leftSpeed, exponentFactor));
            }
        }
        else{
            mainLeft.set(0);
            reserveLeft.set(0);
        }

        // Put code here to be run every loop
        
        // System.out.println(String.valueOf(interf.right.getY()));
        
        // System.out.println(String.valueOf(interf.right.getRawAxis(0)));
        System.out.println(String.valueOf(interf.controller.getRawAxis(1)));
        // System.out.println(String.valueOf(interf.right.getRawAxis(2)));
        // System.out.println(String.valueOf(interf.right.getRawAxis(3)));
        // System.out.println(String.valueOf(interf.right.getRawAxis(4)));
        // System.out.println(String.valueOf(interf.right.getRawAxis(5)));
        // System.out.println(interf.left.getName());
        // System.out.println(interf.right.getName());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

